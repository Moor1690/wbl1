package main

/*
К каким негативным последствиям может привести данный фрагмент кода, и как это исправить? Приведите корректный пример реализации.


var justString string
func someFunc() {
  v := createHugeString(1 << 10)
  justString = v[:100]
}

func main() {
  someFunc()
}
*/
//https://ru.stackoverflow.com/questions/1446734/%D0%98%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B3%D0%BB%D0%BE%D0%B1%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B9-%D0%BF%D0%B5%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B9

/*
Данный фрагмент кода может привести к потенциальной проблеме с использованием памяти, известной как "утечка памяти". Проблема заключается в том, что переменная v в функции someFunc ссылается на очень большую строку, созданную функцией createHugeString. Когда присваиватся срез этой строки переменной justString, которая является глобальной, в реальности justString будет хранить ссылку на всю строку, а не только на требуемые 100 символов. Это происходит из-за того, что срезы в Go сохраняют ссылку на исходный массив, и пока срез активен, весь массив не может быть собран сборщиком мусора.
*/

var justString string

func someFunc() {
	v := createHugeString(1 << 10)
	justString = string([]byte(v[:100])) // Копирование необходимых данных в новую строку
}

func main() {
	someFunc()
}

package main

/*
Разработать конвейер чисел. Даны два канала: в первый пишутся числа (x) из массива, во второй — результат операции x*2, после чего данные из второго канала должны выводиться в stdout.
*/
import (
	"fmt"
	"sync"
)

func main() {
	// Создаем два канала для передачи целочисленных значений между горутинами.
	chan1 := make(chan int)
	chan2 := make(chan int)

	// Создаем объект WaitGroup для ожидания завершения всех горутин.
	var wg sync.WaitGroup

	// Создаем слайс с целочисленными значениями.
	arr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}

	// Горутина 1: отправляет значения из слайса в chan1 и закрывает chan1 после отправки.
	wg.Add(1)
	go func() {
		defer wg.Done()
		for _, val := range arr {
			chan1 <- val
		}
		close(chan1) // Закрыть канал после отправки всех значений
	}()

	// Горутина 2: читает значения из chan1, умножает их на 2 и отправляет в chan2, а затем закрывает chan2.
	wg.Add(1)
	go func() {
		defer wg.Done()
		for val := range chan1 { // Используем range для чтения из канала
			chan2 <- val * 2
		}
		close(chan2) // Закрыть второй канал после обработки
	}()

	// Горутина 3: читает значения из chan2 и выводит их на стандартный вывод.
	wg.Add(1)
	go func() {
		defer wg.Done()
		for val := range chan2 { // Используем range для чтения из канала
			fmt.Println(val)
		}
	}()

	// Ожидаем завершения всех горутин.
	wg.Wait()
}
